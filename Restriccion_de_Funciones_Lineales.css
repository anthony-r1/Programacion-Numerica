<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Restricción de Funciones Lineales - Programación Numérica</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary-bg: #0a1628;
            --secondary-bg: #162032;
            --accent-bg: #1e293b;
            --card-bg: #334155;
            --primary-color: #3b82f6;
            --secondary-color: #06b6d4;
            --tertiary-color: #8b5cf6;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --text-color: #f1f5f9;
            --text-muted: #94a3b8;
            --gradient-1: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            --gradient-2: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%);
            --gradient-3: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            --gradient-4: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
            --glow-blue: 0 0 30px rgba(59, 130, 246, 0.3);
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--primary-bg);
            color: var(--text-color);
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Night Sky Background */
        .night-sky {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #0a1628 0%, #162032 50%, #1e293b 100%);
            z-index: -2;
        }

        .stars {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .star {
            position: absolute;
            width: 2px;
            height: 2px;
            background: white;
            border-radius: 50%;
            animation: twinkle 2s infinite;
        }

        @keyframes twinkle {
            0%, 100% { opacity: 0.3; transform: scale(1); }
            50% { opacity: 1; transform: scale(1.2); }
        }

        /* Header */
        .header {
            background: rgba(16, 32, 50, 0.9);
            backdrop-filter: blur(20px);
            padding: 2rem 0;
            border-bottom: 3px solid var(--primary-color);
            box-shadow: var(--glow-blue);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .back-button {
            padding: 0.8rem 1.5rem;
            background: var(--gradient-1);
            color: white;
            border: none;
            border-radius: 25px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }

        .back-button:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 10px 25px rgba(59, 130, 246, 0.4);
        }

        .header-title {
            font-size: 1.8rem;
            background: linear-gradient(135deg, #3b82f6, #06b6d4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .student-info {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            font-size: 0.9rem;
            color: var(--text-muted);
        }

        .info-badge {
            background: rgba(59, 130, 246, 0.1);
            padding: 0.5rem 1rem;
            border-radius: 15px;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        /* Hero Section */
        .hero-section {
            padding: 4rem 0 2rem;
            text-align: center;
        }

        .hero-icon {
            width: 120px;
            height: 120px;
            background: var(--gradient-2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 4rem;
            margin: 0 auto 2rem;
            animation: float 3s ease-in-out infinite;
            box-shadow: 0 0 30px rgba(6, 182, 212, 0.3);
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
        }

        .hero-title {
            font-size: 3.5rem;
            font-weight: 900;
            background: linear-gradient(135deg, #3b82f6, #06b6d4, #8b5cf6);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 1rem;
        }

        .hero-subtitle {
            font-size: 1.3rem;
            color: var(--text-muted);
            margin-bottom: 2rem;
        }

        /* Content Sections */
        .content-section {
            padding: 2rem 0;
        }

        .section-card {
            background: var(--secondary-bg);
            border-radius: 25px;
            border: 2px solid rgba(59, 130, 246, 0.2);
            padding: 2.5rem;
            margin-bottom: 2rem;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .section-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, transparent, rgba(59, 130, 246, 0.05), transparent);
            opacity: 0;
            transition: opacity 0.3s;
        }

        .section-card:hover::before {
            opacity: 1;
        }

        .section-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 50px rgba(59, 130, 246, 0.3);
            border-color: var(--primary-color);
        }

        .section-title {
            font-size: 2rem;
            color: var(--primary-color);
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            position: relative;
            z-index: 2;
        }

        .section-content {
            color: var(--text-muted);
            font-size: 1.1rem;
            line-height: 1.8;
            position: relative;
            z-index: 2;
        }

        /* Exercise Grid */
        .exercises-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }

        .exercise-card {
            background: var(--accent-bg);
            border-radius: 20px;
            border: 2px solid rgba(6, 182, 212, 0.3);
            padding: 2rem;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .exercise-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 50px rgba(6, 182, 212, 0.3);
            border-color: var(--secondary-color);
        }

        .exercise-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .exercise-number {
            width: 50px;
            height: 50px;
            background: var(--gradient-2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            font-weight: 900;
            color: white;
        }

        .exercise-card:nth-child(2) .exercise-number {
            background: var(--gradient-3);
        }

        .exercise-card:nth-child(3) .exercise-number {
            background: var(--gradient-4);
        }

        .exercise-card:nth-child(4) .exercise-number {
            background: var(--gradient-1);
        }

        .exercise-card:nth-child(5) .exercise-number {
            background: var(--gradient-2);
        }

        .exercise-title {
            font-size: 1.3rem;
            color: var(--secondary-color);
            font-weight: 600;
        }

        .exercise-description {
            color: var(--text-muted);
            margin-bottom: 1.5rem;
            line-height: 1.8;
        }

        .exercise-section {
            margin-bottom: 1.5rem;
        }

        .exercise-section h4 {
            color: var(--primary-color);
            margin-bottom: 0.8rem;
            font-size: 1.1rem;
        }

        .variable-list, .restriction-list {
            background: rgba(59, 130, 246, 0.05);
            border-left: 4px solid var(--primary-color);
            padding: 1rem 1.5rem;
            border-radius: 10px;
            margin-bottom: 1rem;
        }

        .variable-list li, .restriction-list li {
            margin-bottom: 0.5rem;
            color: var(--text-color);
        }

        /* Formula Box */
        .formula-box {
            background: rgba(6, 182, 212, 0.1);
            border: 2px solid rgba(6, 182, 212, 0.3);
            border-radius: 15px;
            padding: 1.5rem;
            margin: 1rem 0;
            text-align: center;
            font-size: 1.3rem;
            font-family: 'Courier New', monospace;
            color: var(--secondary-color);
        }

        /* Code Block */
        .code-block {
            background: #0d1117;
            border: 2px solid rgba(139, 92, 246, 0.3);
            border-radius: 15px;
            padding: 2rem;
            margin: 2rem 0;
            overflow-x: auto;
            position: relative;
            z-index: 2;
        }

        .code-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(139, 92, 246, 0.3);
        }

        .code-language {
            color: var(--tertiary-color);
            font-weight: 600;
            font-size: 0.9rem;
        }

        .copy-button {
            padding: 0.5rem 1rem;
            background: var(--gradient-3);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .copy-button:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(139, 92, 246, 0.4);
        }

        .code-content {
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            line-height: 1.6;
            color: #e6edf3;
        }

        .keyword { color: #ff7b72; }
        .function { color: #d2a8ff; }
        .string { color: #a5d6ff; }
        .comment { color: #8b949e; }
        .number { color: #79c0ff; }

        /* Info Box */
        .info-box {
            background: rgba(16, 185, 129, 0.1);
            border-left: 4px solid var(--success-color);
            border-radius: 10px;
            padding: 1.5rem;
            margin: 1.5rem 0;
        }

        .info-box.warning {
            background: rgba(245, 158, 11, 0.1);
            border-left-color: var(--warning-color);
        }

        .info-box-title {
            font-weight: 600;
            color: var(--success-color);
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .info-box.warning .info-box-title {
            color: var(--warning-color);
        }

        /* Responsive */
        @media (max-width: 968px) {
            .exercises-grid {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 768px) {
            .hero-title {
                font-size: 2.5rem;
            }

            .header-content {
                flex-direction: column;
                text-align: center;
            }

            .section-card {
                padding: 1.5rem;
            }

            .exercises-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="night-sky"></div>
    <div class="stars" id="stars"></div>

    <header class="header">
        <div class="container">
            <div class="header-content">
                <a href="unidad1.html" class="back-button">← Volver a Unidad 1</a>
                <h1 class="header-title">Restricción de Funciones Lineales</h1>
                <div class="student-info">
                    <span class="info-badge">👨‍🎓 Anthony Rusbel Puma Huanca</span>
                    <span class="info-badge">📋 Código: 240132</span>
                </div>
            </div>
        </div>
    </header>

    <section class="hero-section">
        <div class="container">
            <div class="hero-icon">🔗</div>
            <h1 class="hero-title">Restricción de Funciones Lineales</h1>
            <p class="hero-subtitle">Problemas de Programación Lineal</p>
        </div>
    </section>

    <div class="container">
        <!-- Descripción -->
        <section class="content-section">
            <div class="section-card">
                <h2 class="section-title">
                    <span>📖</span>
                    Descripción
                </h2>
                <div class="section-content">
                    <p>
                        La <strong>Programación Lineal</strong> es una técnica matemática utilizada para optimizar 
                        (maximizar o minimizar) una función objetivo sujeta a un conjunto de restricciones lineales. 
                        En esta actividad se exploran problemas del mundo real aplicados a contextos tecnológicos 
                        y de ingeniería, donde se deben gestionar recursos limitados de manera eficiente.
                    </p>
                    <p style="margin-top: 1rem;">
                        Los ejercicios propuestos incluyen situaciones de <strong>desarrollo de software</strong>, 
                        <strong>administración de servidores</strong>, <strong>gestión de proyectos</strong>, 
                        <strong>producción de videojuegos</strong> y <strong>manufactura de hardware</strong>.
                    </p>
                </div>
            </div>
        </section>

        <!-- Ejercicios Propuestos -->
        <section class="content-section">
            <div class="section-card">
                <h2 class="section-title">
                    <span>📝</span>
                    Ejercicios Propuestos
                </h2>
                
                <div class="exercises-grid">
                    <!-- Ejercicio 1 -->
                    <div class="exercise-card">
                        <div class="exercise-header">
                            <div class="exercise-number">1</div>
                            <h3 class="exercise-title">Front-end y Back-end</h3>
                        </div>
                        <div class="exercise-description">
                            Un desarrollador tiene 15 horas semanales para dedicar al desarrollo de software 
                            de front-end (x) y back-end (y). Debe dedicar al menos 5 horas al desarrollo de 
                            front-end para cumplir con los entregables del cliente.
                        </div>
                        
                        <div class="exercise-section">
                            <h4>Variables:</h4>
                            <ul class="variable-list">
                                <li><strong>x</strong> = horas semanales en front-end</li>
                                <li><strong>y</strong> = horas semanales en back-end</li>
                            </ul>
                        </div>
                        
                        <div class="exercise-section">
                            <h4>Restricciones:</h4>
                            <div class="formula-box">x + y ≤ 15</div>
                            <div class="formula-box">x ≥ 5</div>
                            <div class="formula-box">x ≥ 0, y ≥ 0</div>
                        </div>
                        
                        <div class="info-box">
                            <div class="info-box-title">
                                <span>💡</span>
                                Interpretación
                            </div>
                            <p>La suma de horas no puede superar 15 y se debe dedicar mínimo 5 horas al front-end.</p>
                        </div>
                    </div>

                    <!-- Ejercicio 2 -->
                    <div class="exercise-card">
                        <div class="exercise-header">
                            <div class="exercise-number">2</div>
                            <h3 class="exercise-title">Servidores A y B</h3>
                        </div>
                        <div class="exercise-description">
                            Un ingeniero de datos administra dos tipos de servidores en la nube: Servidores A 
                            y Servidores B. El costo por hora de Servidor A es S/ 3 y de Servidor B es S/ 5. 
                            El presupuesto máximo semanal es de S/ 20.
                        </div>
                        
                        <div class="exercise-section">
                            <h4>Variables:</h4>
                            <ul class="variable-list">
                                <li><strong>x</strong> = horas de funcionamiento del Servidor A</li>
                                <li><strong>y</strong> = horas de funcionamiento del Servidor B</li>
                            </ul>
                        </div>
                        
                        <div class="exercise-section">
                            <h4>Restricciones:</h4>
                            <div class="formula-box">3x + 5y ≤ 20</div>
                            <div class="formula-box">x ≥ 0, y ≥ 0</div>
                        </div>
                        
                        <div class="info-box">
                            <div class="info-box-title">
                                <span>💡</span>
                                Interpretación
                            </div>
                            <p>El costo total de operación de ambos servidores no puede exceder el presupuesto de S/ 20.</p>
                        </div>
                    </div>

                    <!-- Ejercicio 3 -->
                    <div class="exercise-card">
                        <div class="exercise-header">
                            <div class="exercise-number">3</div>
                            <h3 class="exercise-title">Reuniones y Documentación</h3>
                        </div>
                        <div class="exercise-description">
                            Un administrador de proyectos tecnológicos organiza su tiempo entre reuniones con 
                            stakeholders (x) y trabajo en la documentación técnica (y). Las reuniones requieren 
                            al menos 4 horas semanales y la documentación al menos 6 horas. Dispone de 12 horas semanales.
                        </div>
                        
                        <div class="exercise-section">
                            <h4>Variables:</h4>
                            <ul class="variable-list">
                                <li><strong>x</strong> = horas semanales en reuniones</li>
                                <li><strong>y</strong> = horas semanales en documentación</li>
                            </ul>
                        </div>
                        
                        <div class="exercise-section">
                            <h4>Restricciones:</h4>
                            <div class="formula-box">x ≥ 4</div>
                            <div class="formula-box">y ≥ 6</div>
                            <div class="formula-box">x + y ≤ 12</div>
                            <div class="formula-box">x ≥ 0, y ≥ 0</div>
                        </div>
                        
                        <div class="info-box warning">
                            <div class="info-box-title">
                                <span>⚠️</span>
                                Nota
                            </div>
                            <p>Este problema tiene restricciones mínimas en ambas variables y una restricción máxima total.</p>
                        </div>
                    </div>

                    <!-- Ejercicio 4 -->
                    <div class="exercise-card">
                        <div class="exercise-header">
                            <div class="exercise-number">4</div>
                            <h3 class="exercise-title">Modelos 3D y Texturas</h3>
                        </div>
                        <div class="exercise-description">
                            Una empresa de desarrollo de videojuegos produce dos tipos de assets: Modelos 3D (x) 
                            y Texturas (y). Cada modelo 3D requiere 2 horas de trabajo y cada textura requiere 3 horas. 
                            El equipo tiene 18 horas disponibles semanalmente.
                        </div>
                        
                        <div class="exercise-section">
                            <h4>Variables:</h4>
                            <ul class="variable-list">
                                <li><strong>x</strong> = número de modelos 3D producidos</li>
                                <li><strong>y</strong> = número de texturas producidas</li>
                            </ul>
                        </div>
                        
                        <div class="exercise-section">
                            <h4>Restricciones:</h4>
                            <div class="formula-box">2x + 3y ≤ 18</div>
                            <div class="formula-box">x ≥ 0, y ≥ 0</div>
                        </div>
                        
                        <div class="info-box">
                            <div class="info-box-title">
                                <span>💡</span>
                                Interpretación
                            </div>
                            <p>Las horas totales consumidas por la producción no deben superar 18 horas disponibles.</p>
                        </div>
                    </div>

                    <!-- Ejercicio 5 -->
                    <div class="exercise-card">
                        <div class="exercise-header">
                            <div class="exercise-number">5</div>
                            <h3 class="exercise-title">Dispositivos A y B</h3>
                        </div>
                        <div class="exercise-description">
                            Una startup de hardware dispone de un máximo de 50 unidades de componentes electrónicos. 
                            Para ensamblar un dispositivo tipo A se necesitan 5 unidades y para tipo B se necesitan 10. 
                            La ganancia es de S/ 200 por dispositivo A y S/ 350 por dispositivo B.
                        </div>
                        
                        <div class="exercise-section">
                            <h4>Variables:</h4>
                            <ul class="variable-list">
                                <li><strong>x</strong> = cantidad de dispositivos tipo A</li>
                                <li><strong>y</strong> = cantidad de dispositivos tipo B</li>
                            </ul>
                        </div>
                        
                        <div class="exercise-section">
                            <h4>Restricciones:</h4>
                            <div class="formula-box">5x + 10y ≤ 50</div>
                            <div class="formula-box">x + 2y ≤ 10 (simplificado)</div>
                            <div class="formula-box">x ≥ 0, y ≥ 0</div>
                        </div>
                        
                        <div class="exercise-section">
                            <h4>Función Objetivo:</h4>
                            <div class="formula-box">Z = 200x + 350y (maximizar)</div>
                        </div>
                        
                        <div class="info-box">
                            <div class="info-box-title">
                                <span>💰</span>
                                Optimización
                            </div>
                            <p>Este es un problema de maximización de ganancias sujeto a restricciones de recursos.</p>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Código en Python -->
        <section class="content-section">
            <div class="section-card">
                <h2 class="section-title">
                    <span>💻</span>
                    Implementación en Python - Graficador ASCII
                </h2>
                
                <div class="info-box">
                    <div class="info-box-title">
                        <span>ℹ️</span>
                        Descripción del Código
                    </div>
                    <p>
                        Este programa permite graficar dos restricciones lineales en un plano cartesiano usando 
                        caracteres ASCII. Es útil para visualizar rápidamente regiones factibles sin necesidad 
                        de librerías gráficas.
                    </p>
                </div>
                
                <div class="code-block">
                    <div class="code-header">
                        <span class="code-language">🐍 Python</span>
                        <button class="copy-button" onclick="copyCode()">📋 Copiar Código</button>
                    </div>
                    <pre class="code-content" id="codeContent"><span class="keyword">def</span> <span class="function">graficar_lineas_ascii</span>():
    <span class="keyword">try</span>:
        restric1 = <span class="function">input</span>(<span class="string">"Ingrese la primera restricción (ej: x+y<=15): "</span>).replace(<span class="string">" "</span>, <span class="string">""</span>)
        restric2 = <span class="function">input</span>(<span class="string">"Ingrese la segunda restricción (ej: 3x+5y<=20): "</span>).replace(<span class="string">" "</span>, <span class="string">""</span>)
        
        <span class="keyword">def</span> <span class="function">parse_restric</span>(eq):
            <span class="comment"># Detectar vertical (x=...)</span>
            <span class="keyword">if</span> eq.startswith(<span class="string">"x<="</span>) <span class="keyword">or</span> eq.startswith(<span class="string">"x>="</span>) <span class="keyword">or</span> eq.startswith(<span class="string">"x="</span>):
                num = <span class="function">float</span>(eq.split(<span class="string">"="</span>)[<span class="number">1</span>])
                <span class="keyword">return</span> <span class="string">"vertical"</span>, num
            
            <span class="comment"># Detectar horizontal (y=...)</span>
            <span class="keyword">if</span> eq.startswith(<span class="string">"y<="</span>) <span class="keyword">or</span> eq.startswith(<span class="string">"y>="</span>) <span class="keyword">or</span> eq.startswith(<span class="string">"y="</span>):
                num = <span class="function">float</span>(eq.split(<span class="string">"="</span>)[<span class="number">1</span>])
                <span class="keyword">return</span> <span class="string">"horizontal"</span>, num
            
            <span class="comment"># Caso general ax + by + c = 0</span>
            <span class="keyword">if</span> <span class="string">'x'</span> <span class="keyword">not in</span> eq <span class="keyword">and</span> <span class="string">'y'</span> <span class="keyword">not in</span> eq:
                <span class="keyword">raise</span> ValueError(<span class="string">"Ecuación inválida."</span>)
            
            <span class="comment"># Separar en lados izquierdo y derecho</span>
            <span class="keyword">if</span> <span class="string">"<="</span> <span class="keyword">in</span> eq:
                lhs, rhs = eq.split(<span class="string">"<="</span>)
            <span class="keyword">elif</span> <span class="string">">="</span> <span class="keyword">in</span> eq:
                lhs, rhs = eq.split(<span class="string">">="</span>)
            <span class="keyword">elif</span> <span class="string">"="</span> <span class="keyword">in</span> eq:
                lhs, rhs = eq.split(<span class="string">"="</span>)
            <span class="keyword">else</span>:
                <span class="keyword">raise</span> ValueError(<span class="string">"Restricción no válida."</span>)
            
            rhs = <span class="function">float</span>(rhs)
            a, b = <span class="number">0</span>, <span class="number">0</span>
            
            <span class="keyword">for</span> part <span class="keyword">in</span> lhs.replace(<span class="string">"-"</span>, <span class="string">"+-"</span>).split(<span class="string">"+"</span>):
                <span class="keyword">if</span> part == <span class="string">""</span>:
                    <span class="keyword">continue</span>
                <span class="keyword">if</span> <span class="string">"x"</span> <span class="keyword">in</span> part:
                    coef = part.replace(<span class="string">"x"</span>, <span class="string">""</span>)
                    a = <span class="number">1</span> <span class="keyword">if</span> coef <span class="keyword">in</span> (<span class="string">""</span>, <span class="string">"+"</span>) <span class="keyword">else</span> <span class="number">-1</span> <span class="keyword">if</span> coef == <span class="string">"-"</span> <span class="keyword">else</span> <span class="function">float</span>(coef)
                <span class="keyword">elif</span> <span class="string">"y"</span> <span class="keyword">in</span> part:
                    coef = part.replace(<span class="string">"y"</span>, <span class="string">""</span>)
                    b = <span class="number">1</span> <span class="keyword">if</span> coef <span class="keyword">in</span> (<span class="string">""</span>, <span class="string">"+"</span>) <span class="keyword">else</span> <span class="number">-1</span> <span class="keyword">if</span> coef == <span class="string">"-"</span> <span class="keyword">else</span> <span class="function">float</span>(coef)
            
            <span class="keyword">return</span> <span class="string">"normal"</span>, (a, b, rhs)
        
        tipo1, datos1 = parse_restric(restric1)
        tipo2, datos2 = parse_restric(restric2)
        
        <span class="function">print</span>(<span class="string">"\nLeyenda:\n * = R1\n o = R2\n # = Intersección\n | = Eje Y\n - = Eje X\n + = Origen"</span>)
        
        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="function">range</span>(<span class="number">15</span>, <span class="number">-16</span>, <span class="number">-1</span>):
            linea = <span class="string">""</span>
            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="function">range</span>(<span class="number">-15</span>, <span class="number">16</span>):
                <span class="keyword">def</span> <span class="function">cumple</span>(tipo, datos):
                    <span class="keyword">if</span> tipo == <span class="string">"vertical"</span>:
                        <span class="keyword">return</span> x == datos
                    <span class="keyword">elif</span> tipo == <span class="string">"horizontal"</span>:
                        <span class="keyword">return</span> y == datos
                    <span class="keyword">else</span>:
                        a, b, c = datos
                        <span class="keyword">if</span> b != <span class="number">0</span>:
                            y_calc = (c - a * x) / b
                            <span class="keyword">return</span> <span class="function">round</span>(y_calc) == y
                        <span class="keyword">elif</span> a != <span class="number">0</span>:
                            x_calc = c / a
                            <span class="keyword">return</span> <span class="function">round</span>(x_calc) == x
                        <span class="keyword">return</span> <span class="keyword">False</span>
                
                on_r1 = cumple(tipo1, datos1)
                on_r2 = cumple(tipo2, datos2)
                
                <span class="keyword">if</span> on_r1 <span class="keyword">and</span> on_r2:
                    linea += <span class="string">"#"</span>
                <span class="keyword">elif</span> on_r1:
                    linea += <span class="string">"*"</span>
                <span class="keyword">elif</span> on_r2:
                    linea += <span class="string">"o"</span>
                <span class="keyword">elif</span> x == <span class="number">0</span> <span class="keyword">and</span> y == <span class="number">0</span>:
                    linea += <span class="string">"+"</span>
                <span class="keyword">elif</span> x == <span class="number">0</span>:
                    linea += <span class="string">"|"</span>
                <span class="keyword">elif</span> y == <span class="number">0</span>:
                    linea += <span class="string">"-"</span>
                <span class="keyword">else</span>:
                    linea += <span class="string">" "</span>
            <span class="function">print</span>(linea)
    
    <span class="keyword">except</span> (ValueError, IndexError):
        <span class="function">print</span>(<span class="string">"\nError: La restricción ingresada no es válida."</span>)

<span class="comment"># Ejecutar el programa</span>
graficar_lineas_ascii()</pre>
                </div>
            </div>
        </section>

        <!-- Ejemplos de Uso -->
        <section class="content-section">
            <div class="section-card">
                <h2 class="section-title">
                    <span>🎮</span>
                    Ejemplo de Uso
                </h2>
                
                <div class="section-content">
                    <h3 style="color: var(--secondary-color); margin-bottom: 1rem;">Ejercicio 1: Front-end y Back-end</h3>
                    <div class="info-box">
                        <div class="info-box-title">
                            <span>💻</span>
                            Entrada
                        </div>
                        <p>
                            <strong>Primera restricción:</strong> x+y<=15<br>
                            <strong>Segunda restricción:</strong> x>=5
                        </p>
                    </div>
                    
                    <div class="info-box warning">
                        <div class="info-box-title">
                            <span>📊</span>
                            Salida
                        </div>
                        <p>
                            El programa generará un gráfico ASCII mostrando:<br>
                            - <strong>*</strong> para la línea x+y=15<br>
                            - <strong>o</strong> para la línea x=5<br>
                            - <strong>#</strong> para la intersección de ambas líneas<br>
                            - <strong>|</strong> para el eje Y<br>
                            - <strong>-</strong> para el eje X
                        </p>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <footer style="padding: 2rem 0; text-align: center; border-top: 2px solid rgba(59, 130, 246, 0.2); margin-top: 4rem;">
        <div class="container">
            <p style="color: var(--text-muted);">© 2025 Portafolio Programación Numérica - Anthony Rusbel Puma Huanca</p>
        </div>
    </footer>

    <script>
        // Generate stars
        const starsContainer = document.getElementById('stars');
        for (let i = 0; i < 100; i++) {
            const star = document.createElement('div');
            star.className = 'star';
            star.style.left = Math.random() * 100 + '%';
            star.style.top = Math.random() * 100 + '%';
            star.style.animationDelay = Math.random() * 2 + 's';
            starsContainer.appendChild(star);
        }

        // Copy code function
        function copyCode() {
            const codeContent = document.getElementById('codeContent');
            const textToCopy = codeContent.innerText;
            
            navigator.clipboard.writeText(textToCopy).then(function() {
                const copyButton = document.querySelector('.copy-button');
                const originalText = copyButton.innerHTML;
                
                copyButton.innerHTML = '✓ Copiado!';
                copyButton.style.background = 'linear-gradient(135deg, #10b981 0%, #059669 100%)';
                
                setTimeout(function() {
                    copyButton.innerHTML = originalText;
                    copyButton.style.background = '';
                }, 2000);
            }).catch(function(err) {
                console.error('Error al copiar: ', err);
                alert('No se pudo copiar el código. Por favor, cópialo manualmente.');
            });
        }

        // Smooth scroll
        window.addEventListener('scroll', function() {
            const scrolled = window.pageYOffset;
            const stars = document.querySelectorAll('.star');
            
            stars.forEach((star, index) => {
                const speed = (index % 3 + 1) * 0.1;
                star.style.transform = `translateY(${scrolled * speed}px)`;
            });
        });

        // Animation on scroll
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver(function(entries) {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }
            });
        }, observerOptions);

        // Observe exercise cards
        document.querySelectorAll('.exercise-card, .section-card').forEach(card => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(30px)';
            card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
            observer.observe(card);
        });

        // Add loading animation
        window.addEventListener('load', function() {
            document.body.style.opacity = '0';
            document.body.style.transition = 'opacity 0.5s ease';
            setTimeout(() => {
                document.body.style.opacity = '1';
            }, 100);
        });

        // Add ripple effect to back button
        document.querySelector('.back-button').addEventListener('click', function(e) {
            const ripple = document.createElement('span');
            const rect = this.getBoundingClientRect();
            const size = Math.max(rect.width, rect.height);
            const x = e.clientX - rect.left - size / 2;
            const y = e.clientY - rect.top - size / 2;
            
            ripple.style.width = ripple.style.height = size + 'px';
            ripple.style.left = x + 'px';
            ripple.style.top = y + 'px';
            ripple.style.position = 'absolute';
            ripple.style.borderRadius = '50%';
            ripple.style.background = 'rgba(255, 255, 255, 0.5)';
            ripple.style.transform = 'scale(0)';
            ripple.style.animation = 'ripple 0.6s ease-out';
            ripple.style.pointerEvents = 'none';
            
            this.style.position = 'relative';
            this.style.overflow = 'hidden';
            this.appendChild(ripple);
            
            setTimeout(() => ripple.remove(), 600);
        });

        // Add ripple animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes ripple {
                to {
                    transform: scale(4);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>